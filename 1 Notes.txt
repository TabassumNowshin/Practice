For git bash:---

  to make a file it uses a $ sign followed by space followed by touch followed by space followed by file name with extension. ( the name cannot have any space or it will be treated as separate file )

  to create a git repository: "git inint" is used

  to add email to the repository: "git config --global user.email 'vv@vn'"

  to add name to the repository: 'git config --global user.name "Nowshin Tabassum"'

  to add a file to git repo: git add <file_name>

  to remove file from git repo: git rm --chached <file_name>

  if the file name contains space in it, we can add/remove it in two ways:
          - 2\ index.html (if file_name = 2 index.html)
          - "2 index.html" (it is suggested that we use double quote for windows)
  
  to check what is inside a git repo at any time: git status

  to add all files available with .html extension: git add *.html

  to add everything: git add .

  to remove all: git rm --cached -r .

  to do git commit we first have to add an user.name and user.email otherwise, it won't allow us to do it. Next, to write on the interface that'll pop up, press i, uncomment "initial commit", press q (to escape) and write ":wp" and press enter. 
  commit done. 
  now, if we check status: nothing to commit, working tree clean, since we already committed.
  make some changes and it will be ready to go again.

  since we have already committed once, we use: git add <file> to update what will be committed

  or, use: git restore <file> to discard changes in working directory

  now, if we want to unstage, we use: git restore --staged <file> (unlike before where we used: git rm --cached <file>)

  since we have already commited once, we can skip the whole writing thingy and do this: git commit -m 'changed 1 and 3' which will do the commit.